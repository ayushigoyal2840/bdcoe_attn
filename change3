from tkinter import ttk
from tkinter import messagebox as mess
import tkinter.simpledialog as tsd
import cv2,os
import csv
import numpy as np
import PIL.Image
import pandas as pd
import datetime
import time
from tkinter import *
from tkinter import font
from tkinter.font import Font
import ntplib
from time import ctime


def assure_path_exists(path):
    dir = os.path.dirname(path)
    if not os.path.exists(dir):
        os.makedirs(dir)


#def quit_loop():
    #global selection
    #global g1
    #selection=var.get()
    #if selection == 1:
        #g1="girl"
        #print(g1)
    #elif selection == 2:
        # g1="boy"
        # print(g1)





def tick():
    c = ntplib.NTPClient()
    response = c.request('europe.pool.ntp.org', version=3)
    p = ctime(response.tx_time)
    global m
    global b
    global x
    #global c
    m= p.split(' ')
    time_string = str(m[4])
    #print(time_string)
    clock.config(text=time_string)
    clock.after(200, tick)
    b=time_string.split(':')
    x=int(b[0])

def contact():
        mess._show(title='Contact us', message="Please contact us on : 'ayushigoyal2840@gmail.com' ")

def check_haarcascadefile():
    exists = os.path.isfile("haarcascade_frontalface_default.xml")
    if exists:
        pass
    else:
        mess._show(title='Some file missing', message='Please contact us for help')
        screen6.destroy()


def save_pass():
    assure_path_exists("TrainingImageLabel/")
    exists1 = os.path.isfile("TrainingImageLabel\psd.txt")
    if exists1:
        tf = open("TrainingImageLabel\psd.txt", "r")
        key = tf.read()
    else:
        master.destroy()
        new_pas = tsd.askstring('Old Password not found', 'Please enter a new password below', show='*')
        if new_pas == None:
            mess._show(title='No Password Entered', message='Password not set!! Please try again')
        else:
            tf = open("TrainingImageLabel\psd.txt", "w")
            tf.write(new_pas)
            mess._show(title='Password Registered', message='New password was registered successfully!!')
            return
    op = (old.get())
    newp = (new.get())
    nnewp = (nnew.get())
    if (op == key):
        if (newp == nnewp):
            txf = open("TrainingImageLabel\psd.txt", "w")
            txf.write(newp)
        else:
            mess._show(title='Error', message='Confirm new password again!!!')
            return
    else:
        mess._show(title='Wrong Password', message='Please enter correct old password.')
        return
    mess._show(title='Password Changed', message='Password changed successfully!!')
    master.destroy()


def change_pass():
    global master
    master = Tk()
    master.geometry("400x160")
    master.resizable(False, False)
    master.title("Change Password")
    master.configure(background="white")
    lbl4 = Label(master, text='    Enter Old Password', bg='white', font=('times', 12, ' bold '))
    lbl4.place(x=10, y=10)
    global old
    old = Entry(master, width=25, fg="black", relief='solid', font=('times', 12, ' bold '), show='*')
    old.place(x=180, y=10)
    lbl5 = Label(master, text='   Enter New Password', bg='white', font=('times', 12, ' bold '))
    lbl5.place(x=10, y=45)
    global new
    new = Entry(master, width=25, fg="black", relief='solid', font=('times', 12, ' bold '), show='*')
    new.place(x=180, y=45)
    lbl6 = Label(master, text='Confirm New Password', bg='white', font=('times', 12, ' bold '))
    lbl6.place(x=10, y=80)
    global nnew
    nnew = Entry(master, width=25, fg="black", relief='solid', font=('times', 12, ' bold '), show='*')
    nnew.place(x=180, y=80)
    cancel = Button(master, text="Cancel", command=master.destroy, fg="black", bg="red", height=1, width=25,
                       activebackground="white", font=('times', 10, ' bold '))
    cancel.place(x=200, y=120)
    save1 = Button(master, text="Save", command=save_pass, fg="black", bg="#3ece48", height=1, width=25,
                      activebackground="white", font=('times', 10, ' bold '))
    save1.place(x=10, y=120)
    master.mainloop()

def psw():
            assure_path_exists("TrainingImageLabel/")
            exists1 = os.path.isfile("TrainingImageLabel\psd.txt")
            if exists1:
                tf = open("TrainingImageLabel\psd.txt", "r")
                key = tf.read()
            else:
                new_pas = tsd.askstring('Old Password not found', 'Please enter a new password below', show='*')
                if new_pas == None:
                    mess._show(title='No Password Entered', message='Password not set!! Please try again')
                else:
                    tf = open("TrainingImageLabel\psd.txt", "w")
                    tf.write(new_pas)
                    mess._show(title='Password Registered', message='New password was registered successfully!!')
                    return
            password = tsd.askstring('Password', 'Enter Password', show='*')
            if (password == key):
                TrainImages()
            elif (password == None):
                pass
            else:
                mess._show(title='Wrong Password', message='You have entered wrong password')
def clear():
    txt.delete(0, 'end')
    res = " "
    message1.configure(text=res)


def clear2():
    txt2.delete(0, 'end')
    res = " "
    message1.configure(text=res)

#######################################################################################

def TakeImages():
    check_haarcascadefile()
    columns = ['SERIAL NO.', '', 'ID', '', 'NAME','','GENDER']
    assure_path_exists("StudentDetails/")
    assure_path_exists("TrainingImage/")
    serial = 0
    exists = os.path.isfile("StudentDetails\StudentDetails.csv")
    if exists:
        with open("StudentDetails\StudentDetails.csv", 'r') as csvFile1:
            reader1 = csv.reader(csvFile1)
            for l in reader1:
                serial = serial + 1
        serial = (serial // 2)
        csvFile1.close()
    else:
        with open("StudentDetails\StudentDetails.csv", 'a+') as csvFile1:
            writer = csv.writer(csvFile1)
            writer.writerow(columns)
            serial = 1
        csvFile1.close()
    Id = (txt.get())
    name = (txt2.get())
    if ((name.isalpha()) or (' ' in name)):
        cam = cv2.VideoCapture(0)
        harcascadePath = "haarcascade_frontalface_default.xml"
        detector = cv2.CascadeClassifier(harcascadePath)
        sampleNum = 0
        while (True):
            ret, img = cam.read()
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            faces = detector.detectMultiScale(gray, 1.3, 5)
            for (x, y, w, h) in faces:
                cv2.rectangle(img, (x, y), (x + w, y + h), (255, 0, 0), 2)
                # incrementing sample number
                sampleNum = sampleNum + 1
                # saving the captured face in the dataset folder TrainingImage
                cv2.imwrite("TrainingImage\ " + name + "." + str(serial) + "." + Id + '.' + str(sampleNum) + ".jpg",
                            gray[y:y + h, x:x + w])
                # display the frame
                cv2.imshow('Taking Images', img)
            # wait for 100 miliseconds
            if cv2.waitKey(200) & 0xFF == ord('q'):
                break
            # break if the sample number is morethan 100
            elif sampleNum > 200:
                break
        cam.release()
        cv2.destroyAllWindows()
        #spec=(txt3.get())
        res = "Images Taken for ID : " + Id
        if(var.get()==1):
            spec="girl"
            row = [serial, '', Id, '', name,'',spec]
        elif(var.get()==2):
            spec="boy"
            row = [serial, '', Id, '', name, '', spec]
        with open('StudentDetails\StudentDetails.csv', 'a+') as csvFile:
            writer = csv.writer(csvFile)
            writer.writerow(row)
        csvFile.close()
        message1.configure(text=res)
    else:
        if (name.isalpha() == False):
            res = "Enter Correct name"
            message.configure(text=res)

########################################################################################

def TrainImages():
    check_haarcascadefile()
    assure_path_exists("TrainingImageLabel/")
    recognizer = cv2.face_LBPHFaceRecognizer.create()
    harcascadePath = "haarcascade_frontalface_default.xml"
    detector = cv2.CascadeClassifier(harcascadePath)
    faces, ID = getImagesAndLabels("TrainingImage")
    try:
        recognizer.train(faces, np.array(ID))
    except:
        mess._show(title='No Registrations', message='Please Register someone first!!!')
        return
    recognizer.save("TrainingImageLabel\Trainner.yml")
    res = "Profile Saved Successfully"
    message1.configure(text=res)
    message.configure(text='Total Registrations till now  : ' + str(ID[0]))

############################################################################################3

def getImagesAndLabels(path):
    # get the path of all the files in the folder
    imagePaths = [os.path.join(path, f) for f in os.listdir(path)]
    # create empth face list
    faces = []
    # create empty ID list
    Ids = []
    # now looping through all the image paths and loading the Ids and the images
    for imagePath in imagePaths:
        # loading the image and converting it to gray scale
        pilImage = PIL.Image.open(imagePath).convert('L')
        # Now we are converting the PIL image into numpy array
        imageNp = np.array(pilImage, 'uint8')
        # getting the Id from the image
        ID = int(os.path.split(imagePath)[-1].split(".")[1])
        # extract the face from the training image sample
        faces.append(imageNp)
        Ids.append(ID)
    return faces, Ids

###########################################################################################

# def in1():
#     print("you are in")
# def out():
#     print("You are out")
def TrackImages():
    # global count
    # count = 0
    check_haarcascadefile()
    assure_path_exists("Attendance/")
    assure_path_exists("StudentDetails/")
    for k in tv.get_children():
        tv.delete(k)
    msg = ''
    i = 0
    j = 0
    recognizer = cv2.face.LBPHFaceRecognizer_create()  # cv2.createLBPHFaceRecognizer()
    exists3 = os.path.isfile("TrainingImageLabel\Trainner.yml")
    if exists3:
        recognizer.read("TrainingImageLabel\Trainner.yml")
    else:
        mess._show(title='Data Missing', message='Please click on Save Profile to reset data!!')
        return
    harcascadePath = "haarcascade_frontalface_default.xml"
    faceCascade = cv2.CascadeClassifier(harcascadePath);

    cam = cv2.VideoCapture(0)
    font = cv2.FONT_HERSHEY_SIMPLEX
    col_names = ['Id', '', 'Name', '', 'Date', '', 'Time', '', 'status']
    exists1 = os.path.isfile("StudentDetails\StudentDetails.csv")
    if exists1:
        df = pd.read_csv("StudentDetails\StudentDetails.csv")
    else:
        mess._show(title='Details Missing', message='Students details are missing, please check!')
        cam.release()
        cv2.destroyAllWindows()
        screen6.destroy()
    while True:
        ret, im = cam.read()
        gray = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)
        faces = faceCascade.detectMultiScale(gray, 1.2, 5)
        for (x, y, w, h) in faces:
            cv2.rectangle(im, (x, y), (x + w, y + h), (0, 225, 0), 2)
            serial, conf = recognizer.predict(gray[y:y + h, x:x + w])
            if (conf < 50):
                ts = time.time()
                date = datetime.datetime.fromtimestamp(ts).strftime('%d-%m-%Y')
                timeStamp = datetime.datetime.fromtimestamp(ts).strftime('%H:%M:%S')
                d = timeStamp.split(':')

                z = int(d[0])
                z1 = int(d[1])
                aa = df.loc[df['SERIAL NO.'] == serial]['NAME'].values
                ID = df.loc[df['SERIAL NO.'] == serial]['ID'].values
                ID = str(ID)
                ID = ID[1:-1]
                bb = str(aa)
                bb = bb[2:-2]
                #count=count+1
                if (var2.get()==3):
                    global status1
                    status1 = "in"
                    attendance = [str(ID), '', bb, '', str(date), '', str(timeStamp), '', status1]

                elif (var2.get()==4):
                    global status
                    status = "out"
                    attendance = [str(ID), '', bb, '', str(date), '', str(timeStamp), '', status]



                         # if count % 2 != 0:
                         #     global status1
                         #     status1 = "in"
                         #     attendance = [str(ID), '', bb, '', str(date), '', str(timeStamp), '', status1]




            else:
                Id = 'Unknown'
                bb = str(Id)
            cv2.putText(im, str(bb), (x, y + h), font, 1, (255, 255, 255), 2)
        cv2.imshow('Taking Attendance', im)
        if (cv2.waitKey(1) == ord('q')):
            break
    ts = time.time()
    date = datetime.datetime.fromtimestamp(ts).strftime('%d-%m-%Y')
    exists = os.path.isfile("Attendance\Attendance_" + date + ".csv")
    c = ntplib.NTPClient()
    response = c.request('europe.pool.ntp.org', version=3)
    p = ctime(response.tx_time)
    m = p.split(' ')
    time_string = str(m[4])
    clock.config(text=time_string)
    clock.after(200, tick)
    b = time_string.split(':')
    x = int(b[0])
    if exists:
        if (x - z == 0):
            with open("Attendance\Attendance_" + date + ".csv", 'a+') as csvFile1:
                writer = csv.writer(csvFile1)
                writer.writerow(attendance)
            csvFile1.close()
        else:
            print("you are late")
    else:
        with open("Attendance\Attendance_" + date + ".csv", 'a+') as csvFile1:
            writer = csv.writer(csvFile1)
            writer.writerow(col_names)
            writer.writerow(attendance)
        csvFile1.close()
    with open("Attendance\Attendance_" + date + ".csv", 'r') as csvFile1:
        reader1 = csv.reader(csvFile1)
        for lines in reader1:
            i = i + 1
            if (i > 1):
                if (i % 2 != 0):
                    iidd = str(lines[0]) + '   '
                    tv.insert('', 0, text=iidd, values=(str(lines[2]), str(lines[4]), str(lines[6])))

    csvFile1.close()
    cam.release()
    cv2.destroyAllWindows()



def enter():
    global key
    key = ''

    ts = time.time()
    date = datetime.datetime.fromtimestamp(ts).strftime('%d-%m-%Y')
    day, month, year = date.split("-")

    mont = {'01': 'January',
            '02': 'February',
            '03': 'March',
            '04': 'April',
            '05': 'May',
            '06': 'June',
            '07': 'July',
            '08': 'August',
            '09': 'September',
            '10': 'October',
            '11': 'November',
            '12': 'December'
            }


    global screen6
    screen6 = Toplevel(screen)
    screen6.geometry("1280x720")
    screen6.resizable(True, False)
    screen6.title("Big Data Center Of Excellence")
    screen6.configure(background='gray89')
    screen6.iconbitmap('bdf (1).ico')

    frame1 = Frame(screen6, bg="linen", border=1)
    frame1.place(relx=0.11, rely=0.17, relwidth=0.39, relheight=0.80)

    frame2 = Frame(screen6, bg="linen", border=1)
    frame2.place(relx=0.51, rely=0.17, relwidth=0.38, relheight=0.80)

    message3 = Label(screen6, text="Big Data Center Of Excellence", fg="white", bg="royal blue", width=55, height=1,
                        font=('times', 29, ' bold '))
    message3.place(x=10, y=10)

    frame3 = Frame(screen6, bg="white")
    frame3.place(relx=0.52, rely=0.09, relwidth=0.09, relheight=0.07)

    frame4 = Frame(screen6, bg="red")
    frame4.place(relx=0.36, rely=0.09, relwidth=0.16, relheight=0.07)

    datef = Label(frame4, text=day + "-" + mont[month] + "-" + year + "  |  ", fg="gray18", bg="gray89", width=58,
                     height=1, font=('times', 22, ' bold '))
    datef.pack(fill='both', expand=1)
    global clock
    clock = Label(frame3, fg="gray18", bg="gray89", width=55, height=1, font=('times', 22, ' bold '))
    clock.pack(fill='both', expand=1)
    tick()

    head2 = Label(frame2, text="                       For New Registrations                       ", fg="white",
                     bg="gray22", font=('times', 17, ' bold '))
    head2.grid(row=0, column=0)

    head1 = Label(frame1, text="                       For Already Registered                       ", fg="white",
                     bg="gray22", font=('times', 17, ' bold '))
    head1.place(x=0, y=0)

    lbl = Label(frame2, text="Enter ID", width=20, height=1, fg="gray22", bg="linen", font=('times', 17, ' bold '))
    lbl.place(x=80, y=55)
    global txt
    txt = Entry(frame2, width=32, fg="black", font=('times', 15, ' bold '))
    txt.place(x=30, y=88)

    lbl2 = Label(frame2, text="Enter Name", width=20, fg="gray22", bg="linen", font=('times', 17, ' bold '))
    lbl2.place(x=80, y=140)
    global txt2
    txt2 = Entry(frame2, width=32, fg="black", font=('times', 15, ' bold '))
    txt2.place(x=30, y=173)
    global txt3
    global message1
    message1 = Label(frame2, text="", bg="linen", fg="white", width=0, height=1,
                     activebackground="linen", font=('times', 15, ' bold '))
    message1.place(x=7, y=230)
    global message
    message = Label(frame2, text="", bg="gray22", fg="white", width=39, height=1, activebackground="gray22",
                    font=('times', 16, ' bold '))
    message.place(x=7, y=450)

    # #global btn1
    # ll = Label(frame2, text="Gender: ", width=20, fg="gray22", bg="linen", font=('times', 15, ' bold '))
    # ll.place(x=0, y=234)
    # txt3 = Entry(frame2,width=15, fg='black', font=('times', 15, ' bold '))
    # #message2 = Radiobutton(frame2, text="boy", fg='gray22', font=('times', 15, ' bold '), variable=var, value=2)
    # #btn1=Button(frame2, text="OK", command=quit_loop)
    # #btn1.place(x=350,y=234)
    global var
    var = IntVar()
    global ll
    global message111
    global message211
    ll = Label(frame2, text="Gender: ", width=20, fg="gray22", bg="linen", font=('times', 13, ' bold '))
    ll.place(x=0, y=234)

    message111 = Radiobutton(frame2, text="Girl", fg='gray22', bg='linen', font=('times', 13, ' bold '), variable=var,
                            value=1)
    message211 = Radiobutton(frame2, text="Boy", fg='gray22', bg='linen', font=('times', 13, ' bold '), variable=var,
                            value=2)
    message111.place(x=180, y=234)
    message211.place(x=280, y=234)


    #txt3.place(x=280, y=230)
    lbl3 = Label(frame1, text="Attendance", width=20, fg="gray22", bg="linen", height=1,
                    font=('times', 17, ' bold '))
    lbl3.place(x=100, y=115)
    res = 0
    exists = os.path.isfile("StudentDetails\StudentDetails.csv")
    if exists:
        with open("StudentDetails\StudentDetails.csv", 'r') as csvFile1:
           reader1 = csv.reader(csvFile1)
           for l in reader1:
                   res = res + 1
        res = (res // 2) - 1
        csvFile1.close()
    else:
       res = 0
    message.configure(text='Total Registrations till now  : ' + str(res))

    ##################### MENUBAR #################################

    menubar = Menu(screen6, relief='ridge')
    filemenu = Menu(menubar, tearoff=0)
    filemenu.add_command(label='Change Password', command=change_pass)
    filemenu.add_command(label='Contact Us', command=contact)
    filemenu.add_command(label='Exit', command=screen6.destroy)
    menubar.add_cascade(label='Help', font=('times', 29, ' bold '), menu=filemenu)
    global tv
    tv = ttk.Treeview(frame1, height=13, columns=('name', 'date', 'time'))
    tv.column('#0', width=82)
    tv.column('name', width=130)
    tv.column('date', width=133)
    tv.column('time', width=133)
    tv.grid(row=2, column=0, padx=(0, 0), pady=(150, 0), columnspan=4)
    tv.heading('#0', text='ID')
    tv.heading('name', text='NAME')
    tv.heading('date', text='DATE')
    tv.heading('time', text='TIME')

    scroll = ttk.Scrollbar(frame1, orient='vertical', command=tv.yview)
    scroll.grid(row=2, column=4, padx=(0, 100), pady=(150, 0), sticky='ns')
    tv.configure(yscrollcommand=scroll.set)
    global photo3
    photo3 = PhotoImage(file='group2 - Copy - Copy.png')
    clearButton = Button(frame2, image=photo3, command=clear, fg="black", bg="linen", width=184, height=49, border=0,
                            activebackground="white", font=('times', 11, ' bold '))
    clearButton.place(x=335, y=86)

    clearButton2 = Button(frame2, image=photo3, command=clear2, fg="black", bg="linen", width=184, height=49,
                             border=0,
                             activebackground="white", font=('times', 11, ' bold '))
    clearButton2.place(x=335, y=172)
    global photo
    photo = PhotoImage(file="group2.png")
    takeImg = Button(frame2, image=photo, command=TakeImages, fg="white", border=0, bg="linen", width=184, height=49,
                        activebackground="white", font=('times', 15, ' bold '))
    takeImg.place(x=30, y=300)
    global photo2
    photo2 = PhotoImage(file="group2 - Copy.png")
    trainImg = Button(frame2, image=photo2, command=psw, fg="white", bg="linen", border=0, width=184, height=49,
                         activebackground="white", font=('times', 15, ' bold '))

    trainImg.place(x=30, y=380)
    trackImg = Button(frame1, text="Take Attendence", command=TrackImages, fg="white", bg="gray22", width=35,
                         height=1,
                         activebackground="white", font=('times', 15, ' bold '))
    trackImg.place(x=30, y=50)
    global var2
    var2 = IntVar()
    global ll2
    global message11
    global message21
    ll2 = Label(frame1, text="status: ", width=20, fg="gray22", bg="linen", font=('times', 13, ' bold '))
    ll2.place(x=0, y=90)

    message11 = Radiobutton(frame1, text="in", fg='gray22',bg='linen', font=('times', 13, ' bold '), variable=var2, value=3)
    message21 = Radiobutton(frame1, text="out", fg='gray22' ,bg='linen',font=('times', 13, ' bold '), variable=var2, value=4)
    message11.place(x=180, y=90)
    message21.place(x=230, y=90)

    quitWindow = Button(frame1, text="Quit", command=screen.destroy, fg="white", bg="gray22", width=35, height=1,
                           activebackground="white", font=('times', 15, ' bold '))
    quitWindow.place(x=30, y=450)

    screen6.configure(menu=menubar)


def delete3():
    screen4.destroy()

def delete4():
    screen5.destroy()

def login_success():
    global screen3
    screen3=Toplevel(screen)
    screen3.title("BDCOE")
    screen3.geometry("300x200")
    Label(screen3,text= "Login Success", width=30, height=1, bg="green", fg="white", font=("Calibri", 15)).pack()
    Label(screen3, text=" ").pack()
    Label(screen3, text="Mark Attendence", width=30, height=1, fg="gray22", font=("Calibri", 13)).pack()
    Label(screen3, text=" ").pack()

    global photo10
    photo10=PhotoImage(file="att.png")
    Button(screen3,image=photo10,width="300", height="49",border=0, command=enter).pack()
    screen3.iconbitmap('bdf (1).ico')

def password_not_recognized():
    global screen4
    screen4 = Toplevel(screen)
    screen4.title("Success")
    screen4.geometry("150x100")
    Label(screen4, text="Password Error", fg='red', font=("Calibri", 15)).pack()
    Label(screen4, text="")
    Button(screen4, text="OK", border=1,command=delete3).pack()

def user_not_found():
    global screen5
    screen5 = Toplevel(screen)
    screen5.title("Success")
    screen5.geometry("400x100")
    Label(screen5, text="User Not Found! Please register yourself.", fg='red', font=("Calibri", 15)).pack()
    Button(screen5, text="OK", command=delete4).pack()


def register_user():
    username_info=username.get()
    password_info=password.get()

    file=open(username_info, "w")
    file.write(username_info+"\n")
    file.write(password_info)
    file.close()

    username_entry.delete(0, END)
    password_entry.delete(0, END)

    Label(screen1, text="Registration Successful", fg="green", font=("Calibri", 12)).pack()


def login_verify():
    username1 = username_verify.get()
    password1 = password_verify.get()
    username_entry1.delete(0, END)
    password_entry1.delete(0, END)
    list_of_files=os.listdir()
    if username1 in list_of_files:
        file1=open(username1, "r")
        verify=file1.read().splitlines()
        if password1 in verify:
            enter()
        else:
            password_not_recognized()
    else:
        user_not_found()


def register():
    global screen1
    screen1=Toplevel(screen)
    screen1.title("Register")
    screen1.geometry("450x400")

    global username
    global password
    username=StringVar()
    password= StringVar()
    Label(screen1, text="Please enter details below ", width=50, height=1, bg="gray30", fg="white", font=("Calibri", 17)).pack()
    global photo11
    photo11 = PhotoImage(file="AKGEC_1_0.png")
    Label(screen1, image=photo11, width="150", height="150").pack()
    Label(screen1, text="Username ",fg="gray30", font=("Calibri",15)).pack()
    global username_entry
    global password_entry
    username_entry=Entry(screen1, textvariable=username)
    username_entry.pack()
    Label(screen1, text="Password" ,fg="gray30", font=("Calibri",15)).pack()
    password_entry=Entry(screen1, textvariable=password, show='*')
    password_entry.pack()
    global photo8
    photo8=PhotoImage(file="register - Copy.png")
    Button(screen1,image=photo8, width="200", height="48",border=0,command=register_user).pack()
    Label(screen1, text="").pack()
    Label(screen1, text="Big Data Center Of Excellence", height=1, width=30, fg="gray59", font=("Calibri", 13)).pack()
    screen1.iconbitmap('bdf (1).ico')

def login():
    global screen2
    global username_verify
    global password_verify
    screen2=Toplevel(screen)
    screen2.title("Login")
    screen2.geometry("450x400")
    Label(screen2, text="Please enter details below to login", width=50, height=1, bg="gray30", fg="white", font=("Calibri", 17)).pack()
    global photo10
    photo10=PhotoImage(file="AKGEC_1_0.png")
    Label(screen2, image=photo10,width="150", height="150").pack()
    username_verify=StringVar()
    password_verify=StringVar()
    Label(screen2, text="Username ",fg="gray30", font=("Calibri",15)).pack()


    global username_entry1
    global password_entry1
    username_entry1=Entry(screen2, textvariable=username_verify)
    username_entry1.pack()
    Label(screen2, text="Password ",fg="gray30", font=("Calibri",15)).pack()
    password_entry1 = Entry(screen2, textvariable=password_verify, show='*')
    password_entry1.pack()
    global photo9
    photo9=PhotoImage(file="login2.png")
    Button(screen2,image=photo9,width="200", height="48",border=0,command= login_verify).pack()
    Label(screen2, text="").pack()
    Label(screen2,text="Big Data Center Of Excellence", height=1, width=30, fg="gray59", font=("Calibri", 13)).pack()
    screen2.iconbitmap('bdf (1).ico')







def main_screen():
    global screen
    screen=Tk()
    screen.geometry("450x450")
    screen.title("BDCOE")
    Label(text="").pack()
    my_font = Font(family="Calibri", size=18, weight="bold", slant="roman", underline=1)
    Label(text="Big Data Center Of Excellence",width=30,font=my_font, fg="gray22").pack()
    Label(text="").pack()
    photo11=PhotoImage(file="download (1).png")
    Label(image=photo11, width="300", height="180", border=0).pack()
    Label(text="").pack()
    photo7=PhotoImage(file="login.png")
    Button(image=photo7,height="48",width="200",command=login,border=0).pack()
    #Label(text="").pack()
    photo8 = PhotoImage(file="register.png")
    Button(image=photo8,height="48",width="200",command=register,border=0).pack()
    Label(text="").pack()
    Label(text="Aready a member? Login", height=1, width=30, fg="gray59").pack()
    Label(text="New member? Register", height=1, width=30, fg="gray59").pack()



    screen.iconbitmap('bdf (1).ico')
    screen.mainloop()
main_screen()
